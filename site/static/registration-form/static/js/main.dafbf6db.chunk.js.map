{"version":3,"sources":["components/textarea/Textarea.js","components/modal/Modal.js","components/modal/index.js","components/textfield/Textfield.js","components/textfield/index.js","components/autocompletefield/AutocompleteField.js","components/autocompletefield/index.js","components/button/Button.js","components/button/index.js","components/textarea/index.js","components/page/Page.js","components/page/index.js","components/stepIndicator/StepIndicator.js","components/stepIndicator/index.js","FormValidation.js","App.js","serviceWorker.js","index.js"],"names":["countWords","str","replace","eval","Textarea","props","useState","wordCount","setWordCount","textareaHeight","useRef","textareaRef","useEffect","focus","current","className","onChange","e","count","target","value","onKeyDown","keyCode","shiftKey","stopPropagation","style","height","placeholder","ref","Modal","children","Textfield","textboxRef","errorMessage","setErrorMessage","isError","select","validateInput","val","triggerValidateFunctionRef","label","type","onClick","onBlur","onFocus","autoComplete","required","AutocompleteField","showField","setShowField","userInput","setUserInput","selectedIndex","setSelectedIndex","filteredSuggestion","validateFunctionRef","triggerOnChange","commitSelection","selectedWords","suggestionItemMouseDownHandler","suggestions","filter","toLowerCase","indexOf","slice","length","key","map","index","currentSelectedIndex","onMouseDown","onMouseOver","Button","buttonStyle","undefined","disabled","onClickCapture","preventDefault","Page","triggerNextPage","setTriggerNextPage","push","to","nextPage","exact","path","name","formReady","prevPage","StepIndicator","total","proppTypes","PropTypes","number","email","test","String","FormState","generateCurrentDateTimeString","today","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","App","currentStepCount","countStepAndIncrement","university","setUniversity","reason","setReason","unique","setUnique","setName","position","setPosition","phone","setPhone","setEmail","formState","setFormState","submitForm","console","log","data","formDataBundle","Timestamp","Token","serializedForm","Object","keys","encodeURIComponent","join","fetch","method","headers","body","then","catch","basename","whiteSpace","href","FormValidation","UniversityList","split","i","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.dafbf6db.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Textarea.scss\";\n\nfunction countWords(str) {\n  var str = str.replace(/\\S+/g, \"+1\");\n  // TODO: fix this potential loophole\n  return eval(str);\n}\n\nfunction Textarea(props) {\n  const [wordCount, setWordCount] = useState(0);\n  const textareaHeight = useRef(300);\n\n  const textareaRef = useRef();\n\n  const textAreaChange = (e) => {\n    const count = countWords(e.target.value) | 0;\n    setWordCount(count);\n\n    if (props.onChange) props.onChange(e.target.value);\n  };\n\n  const textKeyDown = (e) => {\n    // so that the user can change lines without submitting\n    if (e.keyCode === 13 && !e.shiftKey) e.stopPropagation();\n  };\n\n  useEffect(() => {\n    if (props.focus) textareaRef.current.focus();\n  }, [textareaRef]);\n\n  return (\n    <div className=\"textarea\">\n      <textarea\n        className=\"textarea__text\"\n        onChange={textAreaChange}\n        onKeyDown={textKeyDown}\n        style={{ height: textareaHeight.current + \"px\" }}\n        placeholder={props.placeholder}\n        ref={textareaRef}\n      ></textarea>\n      <div className=\"textarea__word-count\">\n        {wordCount > 1 ? `${wordCount} words` : `${wordCount} word`}\n      </div>\n    </div>\n  );\n}\n\nTextarea.propTypes = {\n  value: PropTypes.string,\n  placeholder: PropTypes.string,\n  focus: PropTypes.any,\n};\n\nexport default Textarea;\n","import React from \"react\";\nimport \"./modal.scss\";\n\nfunction Modal(props) {\n  return (\n    <div className=\"modal-container\">\n      <div className=\"modal\">{props.children}</div>\n    </div>\n  );\n}\n\nexport default Modal;\n","import Modal from \"./Modal\";\n\nexport default Modal;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Textfield(props) {\n  const textboxRef = useRef(null);\n  const [errorMessage, setErrorMessage] = useState(props.errorMessage);\n  // i do not know how this line fix all the error message propagating problems but it workd uwu\n  const isError = errorMessage;\n\n  useEffect(() => {\n    // to select the textbox element when it first show\n    if (props.focus) textboxRef.current.select();\n  }, []);\n\n  const renderRequired = () => {\n    return props.required ? \"*Required\" : \"\";\n  };\n\n  const onTextChange = (e) => {\n    props.onChange(e.target.value);\n    validateInput(e.target.value);\n  };\n\n  const validateInput = (val) => {\n    // do type check everytime user change something\n    if (typeof props.validateInput === \"function\")\n      setErrorMessage(props.validateInput(val));\n  };\n\n  // pass the validate function trigger\n  // for cases when consumer of this component update the value programmatically\n  if (props.triggerValidateFunctionRef)\n    props.triggerValidateFunctionRef.current = validateInput;\n\n  return (\n    <div className={isError ? \"field error\" : \"field\"}>\n      <label className={isError ? \"error\" : \"\"}>{props.label}</label>\n      <input\n        // {...props}\n        className={isError ? \"error\" : \"\"}\n        placeholder={props.placeholder}\n        type={props.type || \"text\"}\n        onChange={onTextChange}\n        onClick={(e) => {\n          e.target.select();\n        }}\n        onBlur={props.onBlur}\n        onFocus={props.onFocus}\n        value={props.value}\n        ref={textboxRef}\n        autoComplete=\"on\"\n      />\n      <span className={isError ? \"field__assist error\" : \"field__assist\"}>\n        {isError ? errorMessage : renderRequired()}\n      </span>\n    </div>\n  );\n}\n\nTextfield.propTypes = {\n  label: PropTypes.string,\n  type: PropTypes.string,\n  errorMessage: PropTypes.string,\n  placeholder: PropTypes.string,\n  required: PropTypes.bool,\n  onChange: PropTypes.func,\n  // returns false or nothing for valid, return string for error message\n  validateInput: PropTypes.func,\n\n  // a reference to get if the props status valid\n  triggerValidateFunctionRef: PropTypes.object,\n};\n\nexport default Textfield;\n","import Textfield from \"./Textfield\";\n\nexport default Textfield;\n","import React, { useState, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Textfield from \"../textfield\";\nimport \"./AutocompleteField.scss\";\n\nfunction AutocompleteField(props) {\n  const MAX_RESULT = 5; // maximun number of result get from the list\n  const SHOW_SUGGESTION_WHEN_EMPTY = false;\n  const [showField, setShowField] = useState(false);\n  const [userInput, setUserInput] = useState(props.value);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  // trigger auto complete box showing\n  const focusHandler = (e) =>\n    SHOW_SUGGESTION_WHEN_EMPTY ? setShowField(true) : false;\n  const blurHandler = (e) => setShowField(false);\n\n  const filteredSuggestion = useRef();\n  const validateFunctionRef = useRef(); //\n\n  const triggerOnChange = (value) => {\n    props.onChange(value);\n\n    validateFunctionRef.current(value);\n  };\n\n  const changeHandler = (val) => {\n    setSelectedIndex(0);\n    setUserInput(val);\n    triggerOnChange(val);\n  };\n\n  const commitSelection = (e) => {\n    // the user is selecting nothing\n    if (selectedIndex === 0) {\n      setShowField(false);\n      return;\n    }\n    const selectedWords = filteredSuggestion.current[selectedIndex - 1];\n    setUserInput(selectedWords);\n    setShowField(false);\n    triggerOnChange(selectedWords);\n  };\n\n  const suggestionItemMouseDownHandler = (e) => {\n    commitSelection();\n  };\n\n  // filter suggestions function\n  const filterSuggestion = () =>\n    props.suggestions\n      .filter((val) => {\n        // search within the suggestion that if filter exist\n        return val.toLowerCase().indexOf(userInput.toLowerCase()) > -1;\n      })\n      .slice(0, MAX_RESULT);\n\n  // update the filter list\n  filteredSuggestion.current = filterSuggestion();\n\n  // if the item we selecting is over the filter list length\n  if (selectedIndex > filteredSuggestion.current.length)\n    setSelectedIndex(filteredSuggestion.current.length - 1);\n\n  // handle keyboard navigation\n  const handleKeyDown = (e) => {\n    // set the state to show field automatically everytime key down\n    setShowField(true);\n    // check for selected list\n    if (e.key === \"Escape\") {\n      // user can use escale to dismiss\n      setShowField(false);\n    }\n\n    if (e.key === \"ArrowDown\") {\n      if (selectedIndex < MAX_RESULT) setSelectedIndex(selectedIndex + 1);\n      e.stopPropagation();\n    }\n    if (e.key === \"ArrowUp\") {\n      if (selectedIndex > 0) setSelectedIndex(selectedIndex - 1);\n      e.stopPropagation();\n    }\n\n    // when the enter key is hit when selecting field...\n    if (e.key === \"Enter\" && showField) {\n      e.stopPropagation();\n      commitSelection();\n    }\n  };\n\n  return (\n    <div className=\"autocomplete-field\" onKeyDown={handleKeyDown}>\n      <Textfield\n        {...props}\n        value={userInput}\n        onFocus={focusHandler}\n        onBlur={blurHandler}\n        onChange={changeHandler}\n        triggerValidateFunctionRef={validateFunctionRef}\n      />\n      <ul\n        className={\n          showField\n            ? \"autocomplete-field__list\"\n            : \"autocomplete-field__list autocomplete-field__list--hidden\"\n        }\n      >\n        {filteredSuggestion.current.map((val, index) => {\n          const currentSelectedIndex = index + 1;\n          return (\n            <li\n              key={index}\n              className={\n                selectedIndex === currentSelectedIndex ? \"highlighted\" : \"\"\n              }\n              onMouseDown={suggestionItemMouseDownHandler}\n              onMouseOver={() => setSelectedIndex(currentSelectedIndex)}\n            >\n              {val}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nAutocompleteField.propTypes = {\n  suggestions: PropTypes.array,\n};\n\nexport default AutocompleteField;\n","import AutocompleteField from \"./AutocompleteField\";\n\nexport default AutocompleteField;\n","// react wrapper of the caseit style button\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Button(props) {\n  let buttonStyle = \"\";\n\n  // make the button stye default primary\n  if (props.type === \"primary\" || props.type === undefined)\n    buttonStyle = \"button-primary\";\n  if (props.type === \"secondary\") buttonStyle = \"button-secondary\";\n\n  // the it's a primary button and daibled\n  if (buttonStyle === \"button-primary\" && props.disabled === true)\n    buttonStyle += \" button-primary--disabled\";\n\n  return (\n    <button\n      className={buttonStyle}\n      {...props}\n      onClickCapture={(e) => {\n        if (props.disabled) e.preventDefault();\n      }}\n    >\n      {props.label}\n    </button>\n  );\n}\n\nButton.propTypes = {\n  label: PropTypes.string,\n  type: PropTypes.string, // \"primary\" or \"secondary\"\n  disabled: PropTypes.bool,\n};\n\nexport default Button;\n","import Button from \"./Button\";\n\nexport default Button;\n","import Textarea from \"./Textarea\";\n\nexport default Textarea;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Route, Redirect, Link } from \"react-router-dom\";\nimport Button from \"../button\";\n\n// \"onPageDataChange\"\n// \"onPageStateChange\"\n\nfunction Page(props) {\n  const [triggerNextPage, setTriggerNextPage] = useState(false);\n\n  const prevPageRender = () => {\n    if (props.prevPage === undefined) return null;\n\n    return (\n      <Link to={`/${props.prevPage}`} className=\"link-reset\">\n        <Button label=\"Back\" type=\"secondary\" disabled={false} />\n      </Link>\n    );\n  };\n\n  const nextPageRender = () => {\n    if (props.nextPage === undefined) return null;\n\n    // render a disabled button if the form is not ready\n    if (!props.formReady) return <Button label=\"Next\" disabled={true} />;\n    return (\n      <Link to={`/${props.nextPage}`} className=\"link-reset\">\n        <Button label=\"Next\" disabled={false} />\n      </Link>\n    );\n  };\n\n  const submitRedirectRender = () => {\n    return <Redirect push to={`/${props.nextPage}`} />;\n  };\n\n  // dirty way to trigger submit\n  const submitHandler = (e) => {\n    // when user hit enter\n    if (e.keyCode == 13) {\n      // if the form content is ready to move on, and also there is a next page defined\n      if (props.nextPage !== undefined && props.formReady) {\n        setTriggerNextPage(true);\n      }\n    }\n  };\n\n  // clean up after redirect\n  useEffect(() => {\n    setTriggerNextPage(false);\n  }, [triggerNextPage]);\n\n  if (triggerNextPage) {\n    // setTriggerNextPage(false);\n    return submitRedirectRender();\n  }\n\n  return (\n    <Route exact path={`/${props.name}`}>\n      {/* container for recording keystrokes */}\n      <div className=\"page-container\" onKeyDown={submitHandler}>\n        {props.children}\n        <div className=\"modal__content form-controls\">\n          {prevPageRender()}\n          {nextPageRender()}\n        </div>\n      </div>\n    </Route>\n  );\n}\n\nPage.propTypes = {\n  nextPage: PropTypes.string, // the route for next page\n  prevPage: PropTypes.string, // the route for prev page\n  name: PropTypes.string, // the route for current apge\n  formReady: PropTypes.bool, // tell the component can it switch to other pageslkop09\n};\n\nexport default Page;\n","import Page from \"./Page\";\n\nexport default Page;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./StepIndicator.scss\";\n\nfunction StepIndicator(props) {\n  return (\n    <div className=\"step-indicator\">\n      Step {props.current} out of {props.total}\n    </div>\n  );\n}\n\nStepIndicator.proppTypes = {\n  current: PropTypes.number,\n  total: PropTypes.number,\n};\n\nexport default StepIndicator;\n","import StepIndicator from \"./StepIndicator\";\n\nexport default StepIndicator;\n","export default {\n  emptyCheck: (val) => {\n    return val !== \"\";\n  },\n  emailFormatCheck: (email) => {\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  },\n  phoneNumberCheck: (val) => {\n    const re = /^[+]?[0-9, ]*[(]?[0-9, ]*[)]?[0-9, ]*$/;\n    return re.test(val);\n  },\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.scss\";\n\n// import components\nimport Modal from \"./components/modal\";\nimport Textfield from \"./components/textfield\";\nimport AutocompleteField from \"./components/autocompletefield\";\nimport Button from \"./components/button\";\nimport Textarea from \"./components/textarea\";\nimport Page from \"./components/page\";\nimport StepIndicator from \"./components/stepIndicator\";\n\nimport UniversityList from \"./data/world-university-names.json\";\n\nimport FormValidation from \"./FormValidation\";\n\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\n\nconst NETLIFY_FORM_NAME = \"university-application-form\";\nconst FormState = {\n  FILLING: 0,\n  SUBMITTING: 1,\n  SUBMITTED: 2,\n  ERROR: 3,\n};\n\n// short function for encoding the form data\nconst encode = (data) => {\n  return Object.keys(data)\n    .map((key) => encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]))\n    .join(\"&\");\n};\n\nconst generateCurrentDateTimeString = () => {\n  const today = new Date();\n  const date =\n    today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate();\n  const time =\n    today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n  const dateTime = date + \" \" + time;\n  return dateTime;\n};\n\nfunction App() {\n  const TOTAL_STEPS = 7;\n  let currentStepCount = 0;\n  const countStepAndIncrement = () => {\n    currentStepCount++;\n    return currentStepCount;\n  };\n\n  const [university, setUniversity] = useState(\"\");\n  const [reason, setReason] = useState(\"\");\n  const [unique, setUnique] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [position, setPosition] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n\n  const [formState, setFormState] = useState(FormState.FILLING);\n\n  const isUniversityFormValid = () => {\n    return FormValidation.emptyCheck(university);\n  };\n\n  const isReasonFormValid = () => {\n    return FormValidation.emptyCheck(reason);\n  };\n  const isUniqueFormValid = () => {\n    return FormValidation.emptyCheck(unique);\n  };\n  const isNameFormValid = () => {\n    return FormValidation.emptyCheck(name);\n  };\n  const isPositionFormValid = () => {\n    return FormValidation.emptyCheck(position);\n  };\n  const isEmailFormValid = () => {\n    return (\n      FormValidation.emptyCheck(email) && FormValidation.emailFormatCheck(email)\n    );\n  };\n  const isPhoneFormValid = () => {\n    return (\n      FormValidation.emptyCheck(phone) && FormValidation.phoneNumberCheck(phone)\n    );\n  };\n\n  const submitForm = () => {\n    //TODO: finish submitting\n    setFormState(FormState.SUBMITTING);\n    console.log(\"submitting form...\");\n\n    //\n    const formDataBundle = {\n      \"Primary Contact Name:\": name,\n      \"Primary Contact Email:\": email,\n      \"Primary Contact Phone Number:\": phone,\n      \"Primary Contact Position:\": position,\n      \"University:\": university,\n      \"Why does your university want to compete at CaseIT 2021?\": reason,\n      \"What makes your university unique?\": unique,\n      Timestamp: generateCurrentDateTimeString(),\n      Token: \"submitted via caseit.org\",\n    };\n\n    const serializedForm = encode({\n      \"form-name\": NETLIFY_FORM_NAME,\n      ...formDataBundle,\n    });\n    console.log(serializedForm);\n\n    // send a request to netlify server\n    // https://www.netlify.com/blog/2017/07/20/how-to-integrate-netlifys-form-handling-in-a-react-app/#form-handling-with-a-stateful-react-form\n    fetch(\"https://caseit.org/\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      body: serializedForm,\n    })\n      .then(() => {\n        setFormState(FormState.SUBMITTED);\n      })\n      .catch(setFormState(FormState.ERROR));\n  };\n\n  const renderApplicationForm = () => {\n    return (\n      <>\n        {/* Welcoming Page */}\n        <Route exact path=\"/\">\n          <div className=\"modal__content modal__content--medium\">\n            <h1 className=\"h3\">CaseIT 2021 Applications</h1>\n            <p>\n              To apply for CaseIT 2021, our applicants will have to answer the\n              following questions:\n            </p>\n            <ul>\n              <li>Why does your university want to compete at CaseIT 2020?</li>\n              <li>\n                What makes your university unique compared to other\n                universities?\n              </li>\n            </ul>\n\n            <p style={{ whiteSpace: \"pre-wrap\" }}>\n              Completion of this application does not guarantee a spot in the\n              competition. Applicants{\" \"}\n              <strong>\n                will be notified of application status within 2 weeks\n              </strong>{\" \"}\n              of submitting an application. For any questions, do not hesitate\n              to email us at{\" \"}\n              <a href=\"mailto:caseit@sfu.ca\" target=\"blank\">\n                caseit@sfu.ca\n              </a>\n              {\".\"}\n            </p>\n\n            <Link to=\"university\">\n              <Button label=\"Let's Begin\" />\n            </Link>\n          </div>\n        </Route>\n\n        {/* University Page */}\n        <Page\n          name=\"university\"\n          prevPage=\"\"\n          nextPage=\"reason-to-compete\"\n          formReady={isUniversityFormValid()}\n        >\n          <div className=\"modal__content modal__content--narrow\">\n            <StepIndicator\n              current={countStepAndIncrement()}\n              total={TOTAL_STEPS}\n            />\n            <p className=\"lead\">I am applying on behalf of...</p>\n\n            <AutocompleteField\n              label=\"Name of University\"\n              placeholder=\"University Name\"\n              required={true}\n              onChange={setUniversity}\n              value={university}\n              validateInput={(val) => {\n                if (!FormValidation.emptyCheck(val))\n                  return \"Please enter your university name\";\n              }}\n              suggestions={UniversityList}\n              focus\n            />\n          </div>\n        </Page>\n\n        {/* Reason to compete */}\n        <Page\n          name=\"reason-to-compete\"\n          prevPage=\"university\"\n          nextPage=\"university-unique\"\n          formReady={isReasonFormValid()}\n        >\n          <div className=\"modal__content modal__content--wide\">\n            <StepIndicator\n              current={countStepAndIncrement()}\n              total={TOTAL_STEPS}\n            />\n            <p className=\"lead\">\n              Question 1: Why does <strong>{university}</strong> want to compete\n              at CaseIT 2021?\n            </p>\n          </div>\n          <Textarea\n            placeholder={`State ${university}'s reason to compete...`}\n            onChange={setReason}\n            value={reason}\n            focus\n          />\n        </Page>\n\n        {/* University uniqueness */}\n        <Page\n          name=\"university-unique\"\n          prevPage=\"reason-to-compete\"\n          nextPage=\"name\"\n          formReady={isUniqueFormValid()}\n        >\n          <div className=\"modal__content modal__content--wide\">\n            <StepIndicator\n              current={countStepAndIncrement()}\n              total={TOTAL_STEPS}\n            />\n            <p className=\"lead\">\n              Question 2: What makes <strong>{university}</strong> unique\n              compared to other universities?\n            </p>\n          </div>\n          <Textarea\n            placeholder={`State ${university}'s unique competitive edge...`}\n            onChange={setUnique}\n            value={unique}\n            focus\n          />\n        </Page>\n\n        {/* Name Page */}\n        <Page\n          name=\"name\"\n          prevPage=\"university-unique\"\n          nextPage=\"position\"\n          formReady={isNameFormValid()}\n        >\n          <div className=\"modal__content modal__content--narrow\">\n            <StepIndicator\n              current={countStepAndIncrement()}\n              total={TOTAL_STEPS}\n            />\n            <p className=\"lead\">\n              As the primary contact for <strong>{university}</strong>, my name\n              is\n            </p>\n            <Textfield\n              label=\"Full Name\"\n              placeholder=\"John Doe\"\n              required={true}\n              onChange={setName}\n              value={name}\n              validateInput={(val) => {\n                if (!FormValidation.emptyCheck(val))\n                  return \"Please enter your full name\";\n                return;\n              }}\n              focus\n            />\n          </div>\n        </Page>\n\n        {/* Person's position */}\n        <Page\n          name=\"position\"\n          prevPage=\"name\"\n          nextPage=\"contact-info\"\n          formReady={isPositionFormValid()}\n        >\n          <div className=\"modal__content modal__content--narrow\">\n            <StepIndicator\n              current={countStepAndIncrement()}\n              total={TOTAL_STEPS}\n            />\n            <p className=\"lead\">\n              My position in <strong>{university}</strong> is\n            </p>\n            <Textfield\n              label=\"Position\"\n              placeholder=\"faculty member\"\n              required={true}\n              validateInput={(val) => {\n                if (!FormValidation.emptyCheck(val))\n                  return \"Please enter your position\";\n                return;\n              }}\n              onChange={setPosition}\n              value={position}\n              focus\n            />\n          </div>\n        </Page>\n\n        {/* Person's contact */}\n        <Page\n          name=\"contact-info\"\n          prevPage=\"position\"\n          nextPage=\"confirmation\"\n          formReady={isEmailFormValid() && isPhoneFormValid()}\n        >\n          <div className=\"modal__content modal__content--narrow\">\n            <StepIndicator\n              current={countStepAndIncrement()}\n              total={TOTAL_STEPS}\n            />\n            <p className=\"lead\">\n              My contact information for future communications\n            </p>\n            <Textfield\n              focus\n              label=\"Phone Number\"\n              type=\"tel\"\n              required={true}\n              placeholder=\"+1 (604) 123 4567\"\n              onChange={setPhone}\n              value={phone}\n              validateInput={(val) => {\n                if (!FormValidation.emptyCheck(val))\n                  return \"Please enter your phone number\";\n                if (!FormValidation.phoneNumberCheck(val))\n                  return \"Invalid phone number\";\n                return;\n              }}\n            />\n            <Textfield\n              label=\"Email\"\n              type=\"email\"\n              placeholder=\"example@sfu.ca\"\n              required={true}\n              onChange={setEmail}\n              value={email}\n              validateInput={(val) => {\n                if (!FormValidation.emptyCheck(val))\n                  return \"Please enter your email address\";\n                if (!FormValidation.emailFormatCheck(val))\n                  return \"Invalid email address\";\n                return;\n              }}\n            />\n          </div>\n        </Page>\n\n        <Route exact path=\"/confirmation\">\n          <div className=\"modal__content  modal__content--wide\">\n            <StepIndicator\n              current={countStepAndIncrement()}\n              total={TOTAL_STEPS}\n            />\n            <h1 className=\"h2 summery-header\">Application Confirmation</h1>\n\n            <div className=\"question-prompt\">University</div>\n            <div className=\"question-answer\">{university}</div>\n\n            <div className=\"question-prompt\">\n              Question 1: Why does your university ({university}) want to\n              compete at CaseIT 2021?\n            </div>\n            <div className=\"question-answer\">\n              {reason.split(\"\\n\").map((i, key) => {\n                return <div key={key}>{i}</div>;\n              })}\n            </div>\n\n            <div className=\"question-prompt\">\n              Question 2: What makes your university ({university}) unique\n              compared to other universities?\n            </div>\n            <div className=\"question-answer\">\n              {unique.split(\"\\n\").map((i, key) => {\n                return <div key={key}>{i}</div>;\n              })}\n            </div>\n\n            <div className=\"question-prompt\">University Contact Name</div>\n            <div className=\"question-answer\">{name}</div>\n\n            <div className=\"question-prompt\">University Contact Position</div>\n            <div className=\"question-answer\">{position}</div>\n\n            <div className=\"question-prompt\">\n              University Contact Information\n            </div>\n            <div className=\"question-answer\">\n              <div>Phone: {phone}</div>\n              <div>Email: {email}</div>\n            </div>\n          </div>\n          <div className=\"form-controls modal__content\">\n            <Link to=\"contact-info\" className=\"link-reset\">\n              <Button label=\"back\" type=\"secondary\" />\n            </Link>\n            <Button label=\"Submit\" type=\"primary\" onClick={submitForm} />\n          </div>\n        </Route>\n      </>\n    );\n  };\n\n  const renderSubmittingInterface = () => {\n    return (\n      <div className=\"modal__content\">\n        <p>submitting...</p>\n      </div>\n    );\n  };\n\n  const rednerSubmittedInterface = () => {\n    return (\n      <div className=\"modal__content\">\n        <h1 className=\"h2 summery-header\">Application Submitted!</h1>\n        <p>We will send you a confirmation email very soon.</p>\n        <a href=\"caseit.org\">back to home</a>\n      </div>\n    );\n  };\n\n  const renderErrorInterface = () => {\n    return (\n      <div className=\"modal__content\">\n        <h1 className=\"h2 summery-header\">Ouch :(</h1>\n        <p>\n          Looks like an error occured during submission, please use the\n          following link to try again or contact{\" \"}\n          <a href=\"mailto:caseit@sfu.ca\" target=\"blank\">\n            caseit@sfu.ca\n          </a>\n        </p>\n        <a href=\"/\" className=\"button-primary\">\n          Retry\n        </a>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <Modal>\n        <BrowserRouter basename=\"/\">\n          {formState === FormState.FILLING && renderApplicationForm()}\n          {formState === FormState.SUBMITTING && renderSubmittingInterface()}\n          {formState === FormState.SUBMITTED && rednerSubmittedInterface()}\n          {formState === FormState.ERROR && renderErrorInterface()}\n        </BrowserRouter>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}