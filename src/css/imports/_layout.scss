/* 
 * LAYOUTS
 * 
 * handling spacing of elements
 * 
 * Table of contents
 * 
 * - basic css layout reset
 *   - box-sizing reset
 *   - margin size reset
 * - basic grid structures
 * - layout utilities 
 *   - responsive container
 *   - full width
 * 
 */

@import "./_breakpoints.scss";

// we use SASS-compiled variable here because css var() variable run into issue when using in the media query
$full-width-size: 1200px;
$full-width-size--article: 600px;

// $grid-size-column: 84px;
// $grid-columns: 12;
$grid-gutter: 1rem;

$body-side-margin: 1.5rem;

:root {
  --card-width: 20rem;
}

/*
 *
 * sticky layout
 * 
 */
.sticky {
  position: sticky;
  top: 5rem;
  display: block;
}

/* 
 * A class that use to seperate different chunk of content
 */
.content-block,
section {
  margin-top: 8rem;
  margin-bottom: 8rem;
}

.content-block--related {
  margin-top: 2rem;
}

/* container of layout */
.layout {
  display: flex;
  flex-direction: column;
}

/* for preview purpose */
.layout--frame {
  border: 0.1em dashed #aaa;
  padding: 1em;
  border-radius: 0.25em;
  height: 15rem;
}

/* for center floating column */
.full-width {
  margin-left: $body-side-margin;
  margin-right: $body-side-margin;
  max-width: $full-width-size;
}

.full-width--article {
  margin-left: $body-side-margin;
  margin-right: $body-side-margin;

  max-width: $full-width-size--article;
}

// consider the margin size as well (margin 1rem on each side -> 32px)
@include viewportLargerThan($full-width-size--article + 32px) {
  .full-width--article {
    margin-left: auto;
    margin-right: auto;
  }
}

// consider the margin size as well (margin 1rem on each side -> 32px)
@include viewportLargerThan($full-width-size + 32px) {
  .full-width {
    margin-left: auto;
    margin-right: auto;
  }
}

.fixed-wrapper {
  width: 100%;
  display: block;
  position: fixed;

  // make every fixed container stay on top of other elements
  z-index: 1000;
}

/*
 *
 * 12 column Grid layout for the website
 * 
 */

.grid-2-cols {
  display: grid;
  grid-template-columns: repeat(1, 1fr);
  column-gap: $grid-gutter;
  row-gap: $grid-gutter;
}

// make the text follow the image
.grid-2-cols__image-left,
.grid-2-cols__image-right {
  grid-row: 1;
}

.grid-2-cols__blurb-left,
.grid-2-cols__blurb-right {
  grid-row: auto;
}

.grid-2-cols__heading,
.grid-2-cols__aside,
.grid-2-cols__content-area {
  grid-row: auto;
}

.blurb--valign-center {
  display: flex;
  flex-direction: column;
  // position the content vertically centered
  justify-content: center;
  // prevent button from stretching horizontally
  align-items: flex-start;
}

.grid-2-cols__half {
  grid-row: 1;
}

@include viewportLargerThan($breakpoint-m) {
  // enable full size grid after the mobile breakpoint
  .grid-2-cols {
    grid-template-columns: repeat(12, 1fr);
  }

  // reset all the grid row property from mobile,
  // make them align to one row
  .grid-2-cols__image-left,
  .grid-2-cols__image-right,
  .grid-2-cols__blurb-left,
  .grid-2-cols__blurb-right {
    grid-row: 1;
  }

  .grid-2-cols__blurb-left {
    // start at column 1 and span across 4 cells
    grid-column: 2 / span 4;
  }

  .grid-2-cols__blurb-right {
    // start at column 8 and span across 4 cells
    grid-column: 8 / span 4;
  }

  .grid-2-cols__image-left {
    // start at column 1 and span across 6 cells
    grid-column: 1 / span 6;

    // make the image align to TOP RIGHT corner if its bigger than the grid
    justify-self: end;
  }

  .grid-2-cols__image-right {
    // start at column 7 and span across 6 cells
    grid-column: 7 / span 6;
  }

  .grid-2-cols__image {
    // start at the following column next to the previous content and span across 6 cells
    grid-column: auto / auto;
  }

  .grid-2-cols__heading {
    grid-column: 2/4;
  }

  .grid-2-cols__aside {
    grid-column: 2/4;
  }
  .grid-2-cols__content-area {
    grid-column: 5/12;
  }

  // grid layout size for "full-width--article"
  .grid-2-cols__header--narrow {
    grid-column: 1/5;

    & > *:first-child {
      margin-top: 0rem;
    }
  }
  .grid-2-cols__content--narrow {
    grid-column: 6/12;

    & > *:first-child {
      margin-top: 0rem;
    }
  }

  // for a simple equally seperated grid
  .grid-2-cols__half {
    grid-column: span 6;
  }
}

@include viewportLargerThan($breakpoint-m) {
  .image--bleed-left,
  .image--bleed-right {
    // let the image bleed through the container by assigning a bigger size for it
    min-width: 50vw;

    // constraint the height so that the photo wont be too short
    height: 50rem;

    // change how the image is positioned in side the frame
    object-fit: cover;

    // Text and other elements will always above the image
    // if they ever overlap
    z-index: -1;
  }

  .image--bleed-left {
    // anchor the image to top right when scaling
    transform-origin: top right;
  }

  .image--bleed-right {
    // anchor the image to top left when scaling
    transform-origin: top left;
  }
}

/*
 *
 * Three Cols display
 * 
 */

.grid-3-cols {
  display: grid;
  grid-template-columns: 1fr;
  column-gap: $grid-gutter;
  row-gap: $grid-gutter;
}

// for those 3 continuous column paragarph layout
.gird-3-cols--paragraph {
  row-gap: 0;
  div > p:first-child {
    margin-top: 0rem;
  }
}

@include viewportLargerThan($breakpoint-s) {
  .grid-3-cols {
    grid-template-columns: repeat(3, 1fr);
  }
}

/*
 *
 * Auto flowing card container
 * 
 */
.card-layout-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(var(--card-width), 1fr));
  column-gap: $grid-gutter;
  row-gap: $grid-gutter;
}

.card-layout-container--list {
  display: flex;
  flex-direction: column;
  & > * {
    margin-bottom: 1rem;
  }
}

.card-layout-container--dynamic {
  @include viewportLargerThan($breakpoint-l) {
    grid-template-columns: minmax(var(--card-width), 2fr) 1fr;
  }

  & > * {
    min-height: var(--card-width);
  }

  & > *:first-child {
    grid-row: 1 / span 2;
  }
}

/*
 *
 * Centered text section
 * 
 */
.center-text {
  text-align: center;
  margin: 2rem $body-side-margin;

  p {
    max-width: 27rem;
    margin-left: auto;
    margin-right: auto;
  }

  h2 {
    max-width: 50rem;
    margin-left: auto;
    margin-right: auto;
  }

  :first-child {
    margin-top: 0rem;
  }

  :last-child {
    margin-bottom: 0rem;
  }
}

/*
 *
 * Image Grid
 * 
 */

.photo-grid {
  // grid setup
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  // grid-template-columns: repeat(auto-fit, minmax(5rem, 1fr));
  grid-template-rows: repeat(23, 6vw);

  // Changing the gutter size in photo grid to make it look better on mobile
  column-gap: 0.25rem;
  row-gap: 0.25rem;
  @include viewportLargerThan($breakpoint-m) {
    column-gap: 1rem;
    row-gap: 1rem;
  }

  grid-auto-flow: row;
  // set a constraint of how wide the grid could grow
  // and center the
  max-width: 100vw;
  margin-left: auto;
  margin-right: auto;

  &__img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
}

// utility class for indicating image
.photo-grid > div {
  // center the content text
  display: flex;
  align-items: center;
  justify-content: center;

  padding: 1rem;
  background-color: #eee;
}

// utility class for indicating where the blank space
.photo-grid > .blank {
  // center the content text
  display: flex;
  align-items: center;
  justify-content: center;

  background-color: transparent;
  color: #bbb;
  border: 0.1em dashed #aaa;

  opacity: 0;
}

// utility class for highlighting the current box
.photo-grid > .current {
  background-color: yellow;
}

//  Grid fading image effect
.photo-grid > .fading-top-left {
  transform-origin: top left;
}

.photo-grid > .fading-top-right {
  transform-origin: top right;
}

.photo-grid > .fading-top {
  transform-origin: top;
}

.photo-grid > .fading-far {
  transform: scale(0.4);
  opacity: 0.3;
}

.photo-grid > .fading-close {
  transform: scale(0.8);
  opacity: 0.5;
}

// generate classes for grid items
@for $i from 1 through 6 {
  .photo-grid > .span-col#{$i} {
    grid-column: auto/span #{$i};
  }
}

@for $i from 1 through 6 {
  .photo-grid > .span-row#{$i} {
    grid-row: auto/span #{$i};
  }
}

/*
 *
 * Scroll Lock
 * 
 */
.body-content-wrapper--dimmed {
  transform: scale(0.95) !important;
  opacity: 0.3;
}

.body-content-wrapper--dimmed::after {
  // prevent user from touching the content
  content: "";

  position: fixed;
  top: 0rem;
  bottom: 0rem;
  left: 0rem;
  right: 0rem;

  z-index: 1000;
}

// for the scroll lock transition diminganimation
.body-content-wrapper::after {
  content: "";

  transition-property: background-color;
  transition-duration: 700ms;
  transition-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
}

.body-content-wrapper {
  transform: scale(1);
  transition-property: transform, opacity;
  transition-duration: 700ms;
  transition-timing-function: cubic-bezier(0.16, 1, 0.3, 1);

  will-change: opacity, transform;
}

/*
 *
 * Banner Image
 * 
 */
.banner-image {
  object-fit: cover;
  width: 100%;
  max-height: 50vh;
  margin-top: 4rem;
}

/*
 *
 * Hero Center
 * 
 */

.hero-centered {
  display: flex;
  flex-direction: column;

  // constraint the width
  max-width: 35rem;

  // create space between top and bottom
  padding-top: 20vh;
  padding-bottom: 4rem;

  // center align
  margin-left: auto;
  margin-right: auto;

  text-align: center;

  // tweak the spacing between header and the lead
  p {
    margin-top: 1rem;
  }
}

.hero-left-aligned {
  display: flex;
  flex-direction: column;

  // constraint the width
  max-width: 35rem;

  // create space between top and bottom
  margin-top: 15vh;
  margin-bottom: 6rem;

  // center align
  // margin-left: auto;
  // margin-right: auto;

  text-align: left;

  // tweak the spacing between header and the lead
  p {
    margin-top: 1rem;
  }
}

/*
 *
 * Article Layout
 * 
 */

$breakpoint-article: 1200px;

.article-layout {
  display: flex;
  flex-direction: row;

  --spacing-vertical: 2rem;
}

.article-layout__aside {
  order: 1;
  flex: 0 1 18rem;

  margin-right: 2rem;
  margin-top: var(--spacing-vertical);

  // hide the side bar on mobile, show it on desktops
  display: none;
  @include viewportLargerThan($breakpoint-m) {
    display: block;
  }
}
.article-layout__main {
  flex: 1 1 40rem;
  order: 2;
  margin-top: var(--spacing-vertical);

  // collapse the margin manually inside flex
  & > *:first-child {
    margin-top: 0rem;
  }
}

.article-body-wrapper {
  width: 100%;
}
.article-body {
  // control the flowing behaviour base on the breakpoint
  max-width: 100%;
  margin-left: 0rem;

  @include viewportLargerThan($breakpoint-m) {
    max-width: $full-width-size--article;
    margin-left: auto;
    margin-right: 5%;
  }
}
